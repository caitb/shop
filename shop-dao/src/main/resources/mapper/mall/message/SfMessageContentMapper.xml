<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.masiis.shop.dao.mall.message.SfMessageContentMapper" >
    <resultMap id="BaseResultMap" type="com.masiis.shop.dao.po.SfMessageContent" >
        <id column="id" property="id" jdbcType="BIGINT" />
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
        <result column="shop_id" property="shopId" jdbcType="BIGINT" />
        <result column="user_id" property="userId" jdbcType="BIGINT" />
        <result column="type" property="type" jdbcType="INTEGER" />
        <result column="content" property="content" jdbcType="VARCHAR" />
        <result column="content_url" property="contentUrl" jdbcType="VARCHAR" />
        <result column="status" property="status" jdbcType="INTEGER" />
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
        <result column="remark" property="remark" jdbcType="VARCHAR" />
    </resultMap>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
        delete from sf_message_content
        where id = #{id,jdbcType=BIGINT}
    </delete>

    <insert id="insert" parameterType="com.masiis.shop.dao.po.SfMessageContent" useGeneratedKeys="true" keyProperty="id">
        insert into sf_message_content (id, create_time, shop_id, 
            user_id, type, content, 
            content_url, status, update_time, 
            remark)
        values (#{id,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, #{shopId,jdbcType=BIGINT}, 
            #{userId,jdbcType=BIGINT}, #{type,jdbcType=INTEGER}, #{content,jdbcType=VARCHAR}, 
            #{contentUrl,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, #{updateTime,jdbcType=TIMESTAMP}, 
            #{remark,jdbcType=VARCHAR})
    </insert>

    <update id="updateByPrimaryKey" parameterType="com.masiis.shop.dao.po.SfMessageContent" >
        update sf_message_content
        set create_time = #{createTime,jdbcType=TIMESTAMP},
            shop_id = #{shopId,jdbcType=BIGINT},
            user_id = #{userId,jdbcType=BIGINT},
            type = #{type,jdbcType=INTEGER},
            content = #{content,jdbcType=VARCHAR},
            content_url = #{contentUrl,jdbcType=VARCHAR},
            status = #{status,jdbcType=INTEGER},
            update_time = #{updateTime,jdbcType=TIMESTAMP},
            remark = #{remark,jdbcType=VARCHAR}
        where id = #{id,jdbcType=BIGINT}
    </update>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
        select id, create_time, shop_id, user_id, type, content, content_url, status, update_time, 
        remark
        from sf_message_content
        where id = #{id,jdbcType=BIGINT}
    </select>

    <select id="selectAll" resultMap="BaseResultMap" >
        select id, create_time, shop_id, user_id, type, content, content_url, status, update_time, 
        remark
        from sf_message_content
    </select>

    <select id="queryNumsFromUser" resultType="java.lang.Integer" >
        select count(0)
        from sf_message_content
        WHERE
            user_id = #{params.userId,jdbcType=BIGINT}
        <if test="params.types != null">
            AND `type` IN
            <foreach item="uid" index="index" collection="params.types" open="(" separator="," close=")">
              #{uid}
            </foreach>
        </if>
    </select>

    <select id="selectByFromUserAndType" resultMap="BaseResultMap">
        select id, create_time, shop_id, user_id, `type`, content, content_url, status, update_time,
        remark
        from sf_message_content
        WHERE user_id = #{params.userId,jdbcType=BIGINT}
        <if test="params.types != null">
            AND `type` IN
            <foreach item="uid" index="index" collection="params.types" open="(" separator="," close=")">
                #{uid}
            </foreach>
        </if>
        AND id <![CDATA[ <= ]]>
                (select id
                from sf_message_content
                WHERE user_id = #{params.userId,jdbcType=BIGINT}
                <if test="params.types != null">
                    AND `type` IN
                    <foreach item="uid" index="index" collection="params.types" open="(" separator="," close=")">
                        #{uid}
                    </foreach>
                </if>
                order by create_time DESC, id DESC
                limit #{params.start,jdbcType=INTEGER}, 1)
        order by create_time DESC, id DESC
        limit #{params.size,jdbcType=INTEGER}
    </select>

</mapper>